# This is the MiG specific apache configuration.
# It overrides some settings from the main configuration to be able to simply include
# this configuration from any 'vanilla' httpd.conf.
# Only tested with debian + apache 1.3 but should work with others.

# Server name - commented out to just use hostname for now
#ServerName tmp.imada.sdu.dk

# Point users in the right direction on errors
ServerAdmin mig@imada.sdu.dk

# We need to run as MiG user for access to scripts and user files
User mig
# Weird group sync prevents consistent mig group - use apache
#Group mig
Group apache

# Performance Tuning
StartServers 16
MaxClients 256
MaxRequestsPerChild 10000

# Configure PUT script
<IfModule mod_actions.c>
	#
	# Action lets you define media types that will execute a script whenever
	# a matching file is called. This eliminates the need for repeated URL
	# pathnames for oft-used CGI file processors.
	# Format: Action media/type /cgi-script/location
	# Format: Action handler-name /cgi-script/location
	#
	# We need to let implicit put hit SID to allow resources and oneclick
	# Browser upload uses POST and migscripts use explict CERTPUT
	Script PUT /cgi-sid/put
	Script SIDPUT /cgi-sid/put
	Script CERTPUT /cgi-bin/put
</IfModule>

# Configure SSL
# The whole SSL configuration in this context applies both to
# the main server and all SSL-enabled virtual hosts.
LoadModule ssl_module modules/mod_ssl.so
<IfModule mod_ssl.c>
	# These will make apache listen to port 443 in addition to the
	# standard port 80. HTTPS requests use port 443.
	Listen 443

	# Some MIME-types for downloading Certificates and CRLs
	AddType application/x-x509-ca-cert .crt
	AddType application/x-pkcs7-crl    .crl

	# Semaphore:
	#   Configure the path to the mutual exclusion semaphore the
	#   SSL engine uses internally for inter-process synchronization.
	SSLMutex file:/var/run/mod_ssl_mutex

	# Inter-Process Session Cache:
	#   Configure the SSL Session Cache: First either `none'
	#   or `dbm:/path/to/file' for the mechanism to use and
	#   second the expiring timeout (in seconds).
	SSLSessionCache         dbm:/var/run/mod_ssl_scache
	SSLSessionCacheTimeout  300
	#SSLSessionCache         none

	# Pseudo Random Number Generator (PRNG):
	#   Configure one or more sources to seed the PRNG of the 
	#   SSL library. The seed data should be of good random quality.
	SSLRandomSeed startup file:/dev/urandom 512
	SSLRandomSeed connect file:/dev/urandom 512

	#   SSL Cipher Suite:
	#   List the ciphers that the client is permitted to negotiate.
	#   See the mod_ssl documentation for a complete list.
	#SSLCipherSuite ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP:+eNULL
	SSLCipherSuite HIGH:MEDIUM

	#   Server Certificate:
	#   Point SSLCertificateFile at a PEM encoded certificate.  If
	#   the certificate is encrypted, then you will be prompted for a
	#   pass phrase.  Note that a kill -HUP will prompt again. A test
	#   certificate can be generated with `make certificate' under
	#   built time. Keep in mind that if you've both a RSA and a DSA
	#   certificate you can configure both in parallel (to also allow
	#   the use of DSA ciphers, etc.)
	SSLCertificateFile /etc/httpd/MiG-certificates/server.crt

	#   Server Private Key:
	#   If the key is not combined with the certificate, use this
	#   directive to point at the key file.  Keep in mind that if
	#   you've both a RSA and a DSA private key you can configure
	#   both in parallel (to also allow the use of DSA ciphers, etc.)
	SSLCertificateKeyFile /etc/httpd/MiG-certificates/server.key

	#   Server Certificate Chain:
	#   Point SSLCertificateChainFile at a file containing the
	#   concatenation of PEM encoded CA certificates which form the
	#   certificate chain for the server certificate. Alternatively
	#   the referenced file can be the same as SSLCertificateFile
	#   when the CA certificates are directly appended to the server
	#   certificate for convinience.
	#SSLCertificateChainFile /etc/httpd/conf/ssl.crt/ca.crt

	#   Certificate Authority (CA):
	#   Set the CA certificate verification path where to find CA
	#   certificates for client authentication or alternatively one
	#   huge file containing all of them (file must be PEM encoded)
	#   Note: Inside SSLCACertificatePath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCACertificatePath /etc/httpd/ssl.crt/ssl.crt
	#SSLCACertificateFile /etc/httpd/ssl.crt/ca-bundle.crt
	#SSLCACertificateFile /etc/httpd/MiG-certificates/both.pem
	SSLCACertificateFile /etc/httpd/MiG-certificates/cacert.pem

	#   Certificate Revocation Lists (CRL):
	#   Set the CA revocation path where to find CA CRLs for client
	#   authentication or alternatively one huge file containing all
	#   of them (file must be PEM encoded)
	#   Note: Inside SSLCARevocationPath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	#SSLCARevocationPath /usr/local/httpd/conf/ssl.crl
	#SSLCARevocationFile /usr/local/httpd/conf/ssl.crl/ca-bundle.crl


	#   SSL Protocol Adjustments:
	#   The safe and default but still SSL/TLS standard compliant shutdown
	#   approach is that mod_ssl sends the close notify alert but doesn't wait for
	#   the close notify alert from client. When you need a different shutdown
	#   approach you can use one of the following variables:
	#   o ssl-unclean-shutdown:
	#     This forces an unclean shutdown when the connection is closed, i.e. no
	#     SSL close notify alert is send or allowed to received.  This violates
	#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
	#     this when you receive I/O errors because of the standard approach where
	#     mod_ssl sends the close notify alert.
	#   o ssl-accurate-shutdown:
	#     This forces an accurate shutdown when the connection is closed, i.e. a
	#     SSL close notify alert is send and mod_ssl waits for the close notify
	#     alert of the client. This is 100% SSL/TLS standard compliant, but in
	#     practice often causes hanging connections with brain-dead browsers. Use
	#     this only for browsers where you know that their SSL implementation
	#     works correctly. 
	#   Notice: Most problems of broken clients are also related to the HTTP
	#   keep-alive facility, so you usually additionally want to disable
	#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
	#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
	#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
	#   "force-response-1.0" for this.
	SetEnvIf User-Agent ".*MSIE.*" \
		nokeepalive ssl-unclean-shutdown \
		downgrade-1.0 force-response-1.0

</IfModule>

# proxy directives for zope forward
<IfModule mod_proxy.c>
    #
    # Enable/disable the handling of HTTP/1.1 "Via:" headers.
    # ("Full" adds the server version; "Block" removes all outgoing Via: headers)
    # Set to one of: Off | On | Full | Block
    #
    ProxyVia On
</IfModule>

# Configure ordinary virtual host
<VirtualHost _default_:80>
   # General setup for the virtual host
   DocumentRoot "/home/mig/mig/wwwpublic"
   #ErrorLog /var/log/httpd/error.log
   #TransferLog /var/log/httpd/access.log common

   # Public images shared by http and https pages and scripts
   Alias /images/ /home/mig/mig/images/
   <Directory /home/mig/mig/images>
       AllowOverride None
       Order allow,deny
       Allow from all
   </Directory>

   RewriteEngine On
   RewriteRule ^/MiG(/)*$ /MiG/index.html [R]

   # always HTTPS for manage (NE is important!)
   RewriteRule ^/(.*)manage https://mig-1.imada.sdu.dk/$1manage [NE,L]
   RewriteRule ^/(.*)login_form https://mig-1.imada.sdu.dk/$1login_form [NE,L]

   # Forward ordinary WWW except monitor and images to zope
   # PLEASE NOTE: these next 2 rules will override forwarding below!
   RewriteCond %{REQUEST_URI} !^/images
   RewriteCond %{REQUEST_URI} !^/monitor.html
   RewriteCond %{REQUEST_URI} !^/vgrid
   #RewriteRule ^/(.*) http://mig-2.imada.sdu.dk:8092/VirtualHostBase/http/mig-1.imada.sdu.dk:80/$1 [L,P]
   RewriteRule (.*)$ http://mig-2.imada.sdu.dk:8092/MiG/$1 [L,R]

   # we dont want Zope etc on the MiG servers. Redirect requests to the 
   # location of the public project page, except monitor and images that 
   # should be taken locally from the server.
   <Directory "/home/mig/mig/wwwpublic">
      #Allow everyone here
      Order allow,deny
      Allow from all
   </Directory>
</VirtualHost>
	
# Configure SSL (with certificates) virtual host
<VirtualHost _default_:443>
   #  General setup for the virtual host
   DocumentRoot "/home/mig/mig/wwwuser"
   #ErrorLog /var/log/httpd/error.log
   #TransferLog /var/log/httpd/access.log common
   #   Per-Server Logging:
   #   The home of a custom SSL log file. Use this when you want a
   #   compact non-error SSL logfile on a virtual host basis.
   #CustomLog /var/log/httpd/ssl_request_log \
   #	"%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

   # Public images shared by http and https pages and scripts
   Alias /images/ /home/mig/mig/images/
   <Directory /home/mig/mig/images>
       AllowOverride None
       Order allow,deny
       Allow from all
   </Directory>

   # Keep cgi-cert name for backwards compatibility but point it
   # to cgi-bin
   ScriptAlias /cgi-cert/ "/home/mig/mig/cgi-bin/"
   ScriptAlias /cgi-bin/ "/home/mig/mig/cgi-bin/"
   ScriptAlias /cgi-sid/ "/home/mig/mig/cgi-sid/"
   
   #   SSL Engine Switch:
   #   Enable/Disable SSL for this virtual host.
   SSLEngine on

   # SSL options that depend on which virtual host is used
   #   Client Authentication (Type):
   #   Client certificate verification type and depth.  Types are
   #   none, optional, require and optional_no_ca.  Depth is a
   #   number which specifies how deeply to verify the certificate
   #   issuer chain before deciding the certificate is not valid.
   #SSLVerifyClient require
   #SSLVerifyDepth  10

   #   Access Control:
   #   With SSLRequire you can do per-directory access control based
   #   on arbitrary complex boolean expressions containing server
   #   variable checks and other lookup directives.  The syntax is a
   #   mixture between C and Perl.  See the mod_ssl documentation
   #   for more details.
   #<Location />
   #SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
   #            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
   #            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
   #            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
   #            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
   #           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
   #</Location>

   #   SSL Engine Options:
   #   Set various options for the SSL engine.
   #   o FakeBasicAuth:
   #     Translate the client X.509 into a Basic Authorisation.  This means that
   #     the standard Auth/DBMAuth methods can be used for access control.  The
   #     user name is the `one line' version of the client's X.509 certificate.
   #     Note that no password is obtained from the user. Every entry in the user
   #     file needs this password: `xxj31ZMTZzkVA'.
   #   o ExportCertData:
   #     This exports two additional environment variables: SSL_CLIENT_CERT and
   #     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
   #     server (always existing) and the client (only existing when client
   #     authentication is used). This can be used to import the certificates
   #     into CGI scripts.
   #   o StdEnvVars:
   #     This exports the standard SSL/TLS related `SSL_*' environment variables.
   #     Per default this exportation is switched off for performance reasons,
   #     because the extraction step is an expensive operation and is usually
   #     useless for serving static content. So one usually enables the
   #     exportation for CGI and SSI requests only.
   #   o StrictRequire:
   #     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
   #     under a "Satisfy any" situation, i.e. when it applies access is denied
   #     and no other module can change it.
   #   o OptRenegotiate:
   #     This enables optimized SSL connection renegotiation handling when SSL
   #     directives are used in per-directory context. 
   #SSLOptions +FakeBasicAuth +ExportCertData +CompatEnvVars +StrictRequire
   <Files ~ "\.(cgi|shtml|phtml|php3?)$">
      SSLOptions +StdEnvVars
   </Files>
   
   # Rewriting
   RewriteEngine on
   RewriteLog /var/log/httpd/rewrite.log
   # Notice: Using a high value for RewriteLogLevel will slow down your Apache 
   # server dramatically! 
   # Use the rewriting logfile at a Level greater than 2 only for debugging!
   RewriteLogLevel 1

   # Logs user out of https upon logout
   RewriteRule ^/(.*)logged_out http://mig-1.imada.sdu.dk/$1logged_out [NE,L]
  
   # Forward mangement request directly to zope without virtual host rewrite
   RewriteRule ^/manage http://mig-2.imada.sdu.dk:8092/manage [L,P]

   # Forward ordinary WWW requests to zope
   RewriteRule ^/MiG(/)*$ /MiG/index.html [R]
   RewriteRule ^/MiG/(.*) http://mig-2.imada.sdu.dk:8092/VirtualHostBase/https/mig-1.imada.sdu.dk:443/MiG/$1 [L,P]
   RewriteRule ^/test_plone(.*) http://mig-2.imada.sdu.dk:8092/VirtualHostBase/https/mig-1.imada.sdu.dk:443/test_plone$1 [L,P]

   # Redirect to file in vgrid
   RewriteCond %{REQUEST_URI} ^/vgrid/*/*
   RewriteRule ^/vgrid/([^/]*)/(.*) /cgi-bin/showvgridprivatefile.py?vgrid_name=$1&file=$2 [L,R]

   # Redirect to member/owner wiki in vgrid - we need to introduce
   # a vgrid_shared to be able to discriminate between vgridwiki dir 
   # and normal dirs in rewrite
   RewriteCond %{REQUEST_URI} ^/vgridwiki/*
   RewriteRule ^/vgridwiki/(.*) /cert_redirect/vgrid_shared/$1/.vgridwiki/cgi-bin/moin.cgi [L,R]
        
   # Redirect to owner wiki in vgrid
   RewriteCond %{REQUEST_URI} ^/vgridownerwiki/*
   RewriteRule ^/vgridownerwiki/(.*) /cert_redirect/private_base/$1/.vgridwiki/cgi-bin/moin.cgi [L,R]
	
   # Redirect server status requests to /SERVER_NAME/SERVERNAME.status
   RewriteCond %{REQUEST_URI} ^/server_status
   RewriteRule ^/server_status /%{SERVER_NAME}/%{SERVER_NAME}.status [NE,L]

   #################  PLEASE, FOR THE GOOD OF YOUR OWN MENTAL CONDITION, DO _NOT_
   ################# CHANGE THE LINES IN THIS BLOCK UNLESS IT IS STRICTLY NECESSARY!
   # Redirect user GET file with cert_redirect in request to users home dir.
   # Get the CN from the "logged in" user
   RewriteRule ^/cert_redirect/(.*) %{LA-U:ENV:SSL_CLIENT_S_DN}/$1 [NE]
   
   # Next two lines handles certificates on the form:
   # /C=DK/ST=Denmark/L=Nowhere/O=Internet_Widgits_Pty_Ltd/
   # CN=Test_User_Having_A_Long_Name/emailAddress=email_address@nowhere.com/
   # get the CN part, skip the rest and add the request_uri (remember it 
   # contains the cert_redirect part)
   RewriteRule ^(.*)/CN=(.*)/email /$2%{REQUEST_URI}
   # throw away the cert_redirect part again
   RewriteRule ^(.*)/cert_redirect/(.*) $1/$2
 
   # The next line is for certificates on the traditional form without email after CN:	
   RewriteRule ^(.*)/CN=(.*) /$2
        
   # Keep replacing spaces with underscores
   RewriteRule ^(.*)\ (.*)$ $1_$2 [N]
	
   #################################################################################
   #################################################################################
   # We need to let vgrid wiki cgi requests pass through to ScriptAlias* handlers
   # NB: first regex group *must* match CNs only - not '.*'!
   RewriteRule ^/([A-Z][a-z]*[^/]*)/private_base/(.*)/.vgridwiki/cgi-bin(.*)$ /$1/private_base/$2/.vgridwiki/cgi-bin$3 [L,PT]
   RewriteRule ^/([A-Z][a-z]*[^/]*)/vgrid_shared/(.*)/.vgridwiki/cgi-bin(.*)$ /$1/vgrid_shared/$2/.vgridwiki/cgi-bin$3 [L,PT]
	
   <Directory "/home/mig/mig/">
      # Deny all access to base mig dir and only allow on a subdir basis
      Order deny,allow
      Deny from all
   </Directory>
   <Directory "/home/mig/mig/cgi-bin">
      AllowOverride None
      Options +ExecCGI
      Order allow,deny
      Allow from all
      SSLVerifyClient require
      SSLOptions +StdEnvVars
   </Directory>
   <Directory "/home/mig/mig/cgi-sid">
      AllowOverride None
      Options +ExecCGI
      Order allow,deny
      Allow from all
      #SSLVerifyClient none
      SSLOptions +StdEnvVars
   </Directory>
   <Directory "/home/mig/mig/wwwuser">
      SSLVerifyClient require
      # The next line is crucial for cert_redirect to work!!!
      SSLOptions +StdEnvVars +FakeBasicAuth +ExportCertData
      # This dir is used for a number of public images and templates
      # Access to user home dirs is limited in .htaccess files there.
      Order allow,deny
      Allow from all
   </Directory>
   <Directory "/home/mig/mig/wwwuser/*">
      SSLVerifyClient require
      # Allow .htaccess files for auth
      AllowOverride All
      SSLOptions +StdEnvVars +FakeBasicAuth +ExportCertData +StrictRequire
   </Directory>

   # SID access
   # Resource sessions
   Alias /sid_redirect/ "/home/mig/webserver_home/"
   <Directory "/home/mig/webserver_home/">
      SSLVerifyClient none
      SSLOptions +StdEnvVars
      Options FollowSymLinks
      Order deny,allow
      Allow from all
   </Directory>
   # Dist storage
#   ScriptAlias /storage/ "/home/mig/mig/storage/cgi-bin/"
#   <Directory "/home/mig/mig/storage/cgi-bin">
#      SSLVerifyClient optional
#      SSLOptions +StdEnvVars
#      Order deny,allow
#      Allow from all
#   </Directory>


# BEGIN FOR MiG VGrid MOIN MOIN
   Alias /wiki/ "/usr/share/moin/htdocs/"
   
   # Home directory wiki access - we need to avoid catching raw cert_redirect URLs
   ScriptAliasMatch ^/([A-Z][a-z]*[^/]*)/private_base/(.*)/.vgridwiki/cgi-bin/(.*) /home/mig/mig/wwwuser/$1/private_base/$2/.vgridwiki/cgi-bin/$3
   ScriptAliasMatch ^/([A-Z][a-z]*[^/]*)/vgrid_shared/(.*)/.vgridwiki/cgi-bin/(.*) /home/mig/mig/wwwuser/$1/$2/.vgridwiki/cgi-bin/$3
# END FOR MiG VGrid MOIN MOIN

# BEGIN WEBDAV
   <IfModule mod_dav.c>
      DAVLockDB       /var/lock/DAV/apache
      Alias /dav /DAVTEST
      <Location /dav>
         SSLVerifyClient require
	 DAV On
	 Options Indexes
	 <Limit GET POST OPTIONS>
	    Order allow,deny
	    Allow from all
	 </Limit>
	 <Limit PUT POST DELETE PROPFIND PROPPATCH MKCOL COPY MOVE LOCK UNLOCK>
	    Order allow,deny
	    Allow from all
	 </Limit>
      </Location>
   </IfModule>
# END WEBDAV

</VirtualHost>             
