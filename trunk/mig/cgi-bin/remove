#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# --- BEGIN_HEADER ---
#
# remove - [insert a few words of module description on this line]
# Copyright (C) 2003-2009  The MiG Project lead by Brian Vinter
#
# This file is part of MiG.
#
# MiG is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# MiG is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# -- END_HEADER ---
#

"""Apache handler of the same name which allows direct access to
this function just like GET and PUT."""

import cgi
import cgitb
cgitb.enable()
import os
import sys

# MiG imports

from shared.cgishared import init_cgiscript_possibly_with_cert
from shared.handlers import correct_handler, get_path, get_allowed_path
import shared.localos as localos

# TODO: only output relative paths!

# ## Main ###

handler_name = os.path.basename(sys.argv[0]).upper()

(logger, configuration, cert_name_no_spaces, o) = \
    init_cgiscript_possibly_with_cert()

# Check we are using matching method

if not correct_handler(handler_name):

    # Request method does not match handler

    o.out('You must use HTTP %s!' % handler_name)
    o.reply_and_exit(o.CLIENT_ERROR)

# Check we got a target filename

path = get_path()
if not path:
    o.out('Target filename not found - did you specify one?')
    o.reply_and_exit(o.CLIENT_ERROR)

try:
    target_path = get_allowed_path(configuration, cert_name_no_spaces,
                                   path)
except Exception, err:

    # invalid certificate or session id - deny access!

    o.out('Certificate and Session ID verification failed! (%s)'
           % cert_name_no_spaces)
    o.internal("Entity with cert data '%s' was rejected when trying to use http %s %s: %s"
                % (cert_name_no_spaces, handler_name, path, err))
    o.reply_and_exit(o.ERROR)

# Now handle actual file (shared for for all situations)

try:
    localos.remove(target_path)
except Exception, err:
    filtered_err = str(err).replace(target_path, path)
    o.out('Could not %s %s: %s' % (handler_name, path, filtered_err))
    o.reply_and_exit(o.ERROR)

# if we get here everything was ok

o.reply_and_exit(o.OK)
