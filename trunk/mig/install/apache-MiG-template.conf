# This is the MiG specific apache configuration.
# It overrides some settings from the main configuration to be able to simply include
# this configuration from any 'vanilla' httpd.conf.
# Only tested with debian + apache 2.2 but should work with others.

# Server name - commented out to just use hostname for now
#ServerName __SERVER_FQDN__

# Point users in the right direction on errors
ServerAdmin __USER__

# We may need to run as MiG user or group for file access to work
# through CGI scripts and for direct user file access
__USER_CLAUSE__ __USER__
__GROUP_CLAUSE__ __GROUP__

# Performance Tuning
StartServers 5
MaxClients 250
MaxRequestsPerChild 10000

# Support relocatable configuration if possible
<IfModule mod_env.c>
	SetEnv MIG_CONF	__MIG_HOME__/server/MiGserver.conf
</IfModule>

# Configure WSGI if available
<IfModule mod_wsgi.c>
	# Run WSGI in daemon mode with multiprocessing-only for isolation
	# Please refer to the 'The mod_wsgi Daemon Processes' section in:
	# http://code.google.com/p/modwsgi/wiki/ProcessesAndThreading
	WSGIDaemonProcess __SERVER_FQDN__ processes=5 threads=1 display-name=%{GROUP} user=__USER__ group=__GROUP__ python-path=__MIG_HOME__
	WSGIProcessGroup __SERVER_FQDN__
	WSGIScriptAlias /wsgi __MIG_HOME__/wsgi-scripts/migwsgi.py
</IfModule>

# Configure PUT script
<IfModule mod_actions.c>
	#
	# Action lets you define media types that will execute a script whenever
	# a matching file is called. This eliminates the need for repeated URL
	# pathnames for oft-used CGI file processors.
	# Format: Action media/type /cgi-script/location
	# Format: Action handler-name /cgi-script/location
	#
	# We need to let implicit put hit SID to allow resources and oneclick
	# Browser upload uses POST and migscripts use explict CERTPUT
	Script PUT /cgi-sid/put
	Script SIDPUT /cgi-sid/put
	Script CERTPUT /cgi-bin/put
</IfModule>

# Configure SSL
# The whole SSL configuration in this context applies both to
# the main server and all SSL-enabled virtual hosts.
<IfModule mod_ssl.c>
	# These will make apache listen to port 443 in addition to the
	# standard port 80. HTTPS requests use port 443.
	# These should only be explicitly set with old apache 1.3.x on
	# Debian, so listen_prefix should be set to '#' with apache 2.x
	# where ports are already configured elsewhere.

	__LISTEN_CLAUSE__ __HTTP_PORT__
	__LISTEN_CLAUSE__ __HTTPS_PORT__

	# Some MIME-types for downloading Certificates and CRLs
	AddType application/x-x509-ca-cert .crt
	AddType application/x-pkcs7-crl    .crl

	# Semaphore:
	#   Configure the path to the mutual exclusion semaphore the
	#   SSL engine uses internally for inter-process synchronization.
	#SSLMutex file:__APACHE_RUN__/mod_ssl_mutex
	SSLMutex sem

	# Inter-Process Session Cache:
	#   Configure the SSL Session Cache: First either `none'
	#   or `dbm:/path/to/file' for the mechanism to use and
	#   second the expiring timeout (in seconds).
	#SSLSessionCache         none
	#SSLSessionCache         dbm:__APACHE_RUN__/mod_ssl_scache
	SSLSessionCache         shm:__APACHE_RUN__/mod_ssl_scache
	SSLSessionCacheTimeout  300

	# Pseudo Random Number Generator (PRNG):
	#   Configure one or more sources to seed the PRNG of the 
	#   SSL library. The seed data should be of good random quality.
	SSLRandomSeed startup file:/dev/urandom 1024
	SSLRandomSeed connect file:/dev/urandom 1024

	# Logging:
	#   The home of the dedicated SSL protocol logfile. Errors are
	#   additionally duplicated in the general error log file.  Put
	#   this somewhere where it cannot be used for symlink attacks on
	#   a real server (i.e. somewhere where only root can write).
	#   Log levels are (ascending order: higher ones include lower ones):
	#   none, error, warn, info, trace, debug.
	#SSLLog __APACHE_LOG__/ssl_engine.log
	#SSLLogLevel info

	#
	#   SSL Cipher Suite:
	#   List the ciphers that the client is permitted to negotiate.
	#   See the mod_ssl documentation for a complete list.
	SSLCipherSuite HIGH:MEDIUM

	#   Server Certificate:
	#   Point SSLCertificateFile at a PEM encoded certificate.  If
	#   the certificate is encrypted, then you will be prompted for a
	#   pass phrase.  Note that a kill -HUP will prompt again. A test
	#   certificate can be generated with `make certificate' under
	#   built time. Keep in mind that if you've both a RSA and a DSA
	#   certificate you can configure both in parallel (to also allow
	#   the use of DSA ciphers, etc.)
	SSLCertificateFile __MIG_CERTS__/server.crt

	#   Server Private Key:
	#   If the key is not combined with the certificate, use this
	#   directive to point at the key file.  Keep in mind that if
	#   you've both a RSA and a DSA private key you can configure
	#   both in parallel (to also allow the use of DSA ciphers, etc.)
	SSLCertificateKeyFile __MIG_CERTS__/server.key

	#   Certificate Authority (CA):
	#   Set the CA certificate verification path where to find CA
	#   certificates for client authentication or alternatively one
	#   huge file containing all of them (file must be PEM encoded)
	#   Note: Inside SSLCACertificatePath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	SSLCACertificateFile __MIG_CERTS__/cacert.pem

	#   Certificate Revocation Lists (CRL):
	#   Set the CA revocation path where to find CA CRLs for client
	#   authentication or alternatively one huge file containing all
	#   of them (file must be PEM encoded)
	#   Note: Inside SSLCARevocationPath you need hash symlinks
	#         to point to the certificate files. Use the provided
	#         Makefile to update the hash symlinks after changes.
	SSLCARevocationFile __MIG_CERTS__/crl.pem


	#   SSL Protocol Adjustments:
	#   The safe and default but still SSL/TLS standard compliant shutdown
	#   approach is that mod_ssl sends the close notify alert but doesn't wait for
	#   the close notify alert from client. When you need a different shutdown
	#   approach you can use one of the following variables:
	#   o ssl-unclean-shutdown:
	#     This forces an unclean shutdown when the connection is closed, i.e. no
	#     SSL close notify alert is send or allowed to received.  This violates
	#     the SSL/TLS standard but is needed for some brain-dead browsers. Use
	#     this when you receive I/O errors because of the standard approach where
	#     mod_ssl sends the close notify alert.
	#   o ssl-accurate-shutdown:
	#     This forces an accurate shutdown when the connection is closed, i.e. a
	#     SSL close notify alert is send and mod_ssl waits for the close notify
	#     alert of the client. This is 100% SSL/TLS standard compliant, but in
	#     practice often causes hanging connections with brain-dead browsers. Use
	#     this only for browsers where you know that their SSL implementation
	#     works correctly. 
	#   Notice: Most problems of broken clients are also related to the HTTP
	#   keep-alive facility, so you usually additionally want to disable
	#   keep-alive for those clients, too. Use variable "nokeepalive" for this.
	#   Similarly, one has to force some clients to use HTTP/1.0 to workaround
	#   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and
	#   "force-response-1.0" for this.
	SetEnvIf User-Agent ".*MSIE.*" \
		nokeepalive ssl-unclean-shutdown \
		downgrade-1.0 force-response-1.0

</IfModule>

# Configure ordinary virtual host
<VirtualHost _default_:__HTTP_PORT__>
	# General setup for the virtual host
	DocumentRoot "__MIG_STATE__/wwwpublic"
	ErrorLog __APACHE_LOG__/error.log
	CustomLog __APACHE_LOG__/access.log common

	# Default target for all directories not explicitly configured
	<Directory />
		# Disable all overrides
		AllowOverride None
		# Enable FollowSymlinks and nothing else for all sub dirs
		Options FollowSymLinks
		# Deny all access to base mig dir and only allow on a subdir basis
		Order deny,allow
		Deny from all
	</Directory>
        # Public images shared by http and https pages and scripts
	Alias /images/ __MIG_HOME__/images/
	<Directory __MIG_HOME__/images>
	    Order allow,deny
	    Allow from all
	</Directory>
	# Other public pages
	Alias  /public/ __MIG_STATE__/wwwpublic/
	<Directory "__MIG_STATE__/wwwpublic">
	      # Allow everyone here
	      Order allow,deny
	      Allow from all
	</Directory>
</VirtualHost>

# Configure SSL (with and without certificates) virtual host
<VirtualHost _default_:__HTTPS_PORT__>
	#  General setup for the virtual host
	DocumentRoot "__MIG_STATE__/user_home"
	ErrorLog __APACHE_LOG__/ssl-error.log
	CustomLog __APACHE_LOG__/ssl-access.log common

        # Keep cgi-cert name for backwards compatibility but point it
        # to cgi-bin
        ScriptAlias /cgi-cert/ "__MIG_HOME__/cgi-bin/"
        ScriptAlias /cgi-bin/ "__MIG_HOME__/cgi-bin/"
        ScriptAlias /cgi-sid/ "__MIG_HOME__/cgi-sid/"
	
	#   SSL Engine Switch:
	#   Enable/Disable SSL for this virtual host.
	SSLEngine on

	# SSL options that depend on which virtual host is used
	#   Client Authentication (Type):
	#   Client certificate verification type and depth.  Types are
	#   none, optional, require and optional_no_ca.  Depth is a
	#   number which specifies how deeply to verify the certificate
	#   issuer chain before deciding the certificate is not valid.
	#SSLVerifyClient require
	#SSLVerifyDepth  10

	#   Access Control:
	#   With SSLRequire you can do per-directory access control based
	#   on arbitrary complex boolean expressions containing server
	#   variable checks and other lookup directives.  The syntax is a
	#   mixture between C and Perl.  See the mod_ssl documentation
	#   for more details.
	#<Location />
	#SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \
	#            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \
	#            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \
	#            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \
	#            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \
	#           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/
	#</Location>

	#   SSL Engine Options:
	#   Set various options for the SSL engine.
	#   o FakeBasicAuth:
	#     Translate the client X.509 into a Basic Authorisation.  This means that
	#     the standard Auth/DBMAuth methods can be used for access control.  The
	#     user name is the `one line' version of the client's X.509 certificate.
	#     Note that no password is obtained from the user. Every entry in the user
	#     file needs this password: `xxj31ZMTZzkVA'.
	#   o ExportCertData:
	#     This exports two additional environment variables: SSL_CLIENT_CERT and
	#     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the
	#     server (always existing) and the client (only existing when client
	#     authentication is used). This can be used to import the certificates
	#     into CGI scripts.
	#   o StdEnvVars:
	#     This exports the standard SSL/TLS related `SSL_*' environment variables.
	#     Per default this exportation is switched off for performance reasons,
	#     because the extraction step is an expensive operation and is usually
	#     useless for serving static content. So one usually enables the
	#     exportation for CGI and SSI requests only.
	#   o StrictRequire:
	#     This denies access when "SSLRequireSSL" or "SSLRequire" applied even
	#     under a "Satisfy any" situation, i.e. when it applies access is denied
	#     and no other module can change it.
	#   o OptRenegotiate:
	#     This enables optimized SSL connection renegotiation handling when SSL
	#     directives are used in per-directory context. 
	#SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire
	#<Files ~ "\.(cgi|shtml|phtml|php3?)$">
	#    SSLOptions +StdEnvVars
	#</Files>

	# Rewriting
	RewriteEngine on
        RewriteLog __APACHE_LOG__/rewrite.log
	# Notice: Using a high value for RewriteLogLevel will slow down your Apache 
	# server dramatically! 
	# Use the rewriting logfile at a Level greater than 2 only for debugging!
	RewriteLogLevel 0

        # Redirect to file in vgrid
	RewriteCond %{REQUEST_URI} ^/vgrid/*/*
	RewriteRule ^/vgrid/([^/]*)/(.*) /cgi-bin/showvgridprivatefile.py?vgrid_name=$1&file=$2 [L,R]

        # Redirect to member/owner wiki in vgrid - we need to introduce a vgrid_shared
	# to be able to discriminate between vgridwiki dir and normal dirs in rewrite
	RewriteCond %{REQUEST_URI} ^/vgridwiki/*
	RewriteRule ^/vgridwiki/(.*) /cert_redirect/vgrid_shared/$1/.vgridwiki/cgi-bin/moin.cgi [L,R]

        # Redirect to owner wiki in vgrid
	RewriteCond %{REQUEST_URI} ^/vgridownerwiki/*
	RewriteRule ^/vgridownerwiki/(.*) /cert_redirect/private_base/$1/.vgridwiki/cgi-bin/moin.cgi [L,R]

        # Redirect to public wiki in vgrid
	RewriteCond %{REQUEST_URI} ^/vgridpublicwiki/*
	RewriteRule ^/vgridpublicwiki/(.*) /cert_redirect/public_base/$1/.vgridwiki/cgi-bin/moin.cgi [L,R]
	
	# Redirect server status requests to /SERVER_NAME/SERVERNAME.status
	RewriteCond %{REQUEST_URI} ^/server_status
	RewriteRule ^/server_status /%{SERVER_NAME}/%{SERVER_NAME}.status [NE,L]

	#################################################################################
	#################################################################################

	# Redirect user GET file with cert_redirect in request to users home dir.
	# Get the DN from the certificate of the user.
	#
	# Rewrite DN slightly to match the actual file system homes. I.e. replace space 
	# with underscore and slash with plus in certificate DN.
	#
	# As an example we want the PATH for the user with DN: 
	# /C=DK/ST=NA/L=NA/O=DIKU/OU=NA/CN=Jonas Bardino/emailAddress=bardino@diku.dk
	# to be mapped to 
	# /+C=DK+ST=NA+L=NA+O=DIKU+OU=NA+CN=Jonas_Bardino+emailAddress=bardino@diku.dk/PATH
	# 
	# Access is restricted with htaccess file in user homes so nothing to worry about 
	# in relation to users spoofing rewrite targets.

	# Prepend certificate DN so that we can modify it further without PATH interference 

	RewriteRule ^/cert_redirect/(.*) %{LA-U:ENV:SSL_CLIENT_S_DN}/cert_redirect/$1 [NE]

	# Keep replacing space in DN with underscore
	
	RewriteRule ^(.*)\ (.*)/cert_redirect/(.*)$ $1_$2/cert_redirect/$3 [N]
	
	# Keep replacing slash in DN with plus
	
	RewriteRule ^(.*)/(.*)/cert_redirect/(.*)$ $1+$2/cert_redirect/$3 [N]

	# Finally remove certificate marker
	RewriteRule ^(.+)/cert_redirect/(.*)$ /$1/$2 [N]
	
	#################################################################################
	#################################################################################
	
        # We need to let vgrid wiki cgi requests pass through to ScriptAlias* handlers
	# NB: first regex group *must* match DNs only - not '.*'!
	RewriteRule ^/([^/]+)/public_base/(.*)/.vgridwiki/cgi-bin(.*)$ /$1/public_base/$2/.vgridwiki/cgi-bin$3 [L,PT]
	RewriteRule ^/([^/]+)/private_base/(.*)/.vgridwiki/cgi-bin(.*)$ /$1/private_base/$2/.vgridwiki/cgi-bin$3 [L,PT]
	RewriteRule ^/([^/]+)/vgrid_shared/(.*)/.vgridwiki/cgi-bin(.*)$ /$1/vgrid_shared/$2/.vgridwiki/cgi-bin$3 [L,PT]

	# Default target for all directories not explicitly configured
	<Directory />
		# Disable all overrides
		AllowOverride None
		# Enable FollowSymlinks and nothing else for all sub dirs
		Options FollowSymLinks
		# Deny all access to base mig dir and only allow on a subdir basis
		Order deny,allow
		Deny from all
	</Directory>
        # Public images shared by http and https pages and scripts
	Alias /images/ __MIG_HOME__/images/
	<Directory __MIG_HOME__/images>
		SSLVerifyClient none
		Order allow,deny
		Allow from all
	</Directory>
	<Directory "__MIG_HOME__/cgi-bin">
		SSLVerifyClient require
		SSLOptions +StdEnvVars
		Options +ExecCGI
		Order allow,deny
		Allow from all
	</Directory>
	# WSGI interface (only visible if mod_wsgi is loaded)
	<Directory __MIG_HOME__/wsgi-scripts>
		SSLVerifyClient require
		SSLOptions +StdEnvVars
		Order allow,deny
		Allow from all
	</Directory>
	<Directory "__MIG_HOME__/cgi-sid">
		SSLVerifyClient none
		SSLOptions +StdEnvVars
		Options +ExecCGI
		Order allow,deny
		Allow from all
	</Directory>
	<Directory "__MIG_STATE__/user_home">
		# User home base is used for a number of public images and templates.
		# Require a valid signed certificate for access to home base and to 
		# individual user sub directories.
		# Access to user home dirs is further limited in .htaccess files there
		SSLVerifyClient require
		# The next line is crucial for cert_redirect to work!!!
		SSLOptions +StdEnvVars +ExportCertData
		# Remove source address based access limitations here
		Order allow,deny
		Allow from all
	</Directory>
	<Directory "__MIG_STATE__/user_home/*/">
		# Enable cert based auth with .htaccess file
		AllowOverride AuthConfig
	</Directory>
	<Directory "__MIG_STATE__/user_home/*/*/">
		# Do not allow or waste time on any nested htaccess files
		AllowOverride None
	</Directory>
	# SID access from resources
	Alias /sid_redirect/ "__MIG_STATE__/webserver_home/"
	<Directory "__MIG_STATE__/webserver_home/">
		SSLVerifyClient none
		Order deny,allow
		Allow from all
	</Directory>

# BEGIN OPTIONAL MiG VGrid MOIN MOIN WIKI
	Alias /wiki/ "__MOIN_SHARE__/htdocs/"
	<Directory __MOIN_SHARE__/htdocs>
		SSLVerifyClient none
		Order allow,deny
		Allow from all
	</Directory>

	# Home directory wiki access - we need to avoid catching raw cert_redirect URLs
	ScriptAliasMatch ^/([^/]+)/public_base/(.*)/.vgridwiki/cgi-bin/(.*) __MIG_STATE__/user_home/$1/public_base/$2/.vgridwiki/cgi-bin/$3
	ScriptAliasMatch ^/([^/]+)/private_base/(.*)/.vgridwiki/cgi-bin/(.*) __MIG_STATE__/user_home/$1/private_base/$2/.vgridwiki/cgi-bin/$3
	ScriptAliasMatch ^/([^/]+)/vgrid_shared/(.*)/.vgridwiki/cgi-bin/(.*) __MIG_STATE__/user_home/$1/$2/.vgridwiki/cgi-bin/$3
# END OPTIONAL MiG VGrid MOIN MOIN WIKI

</VirtualHost>
