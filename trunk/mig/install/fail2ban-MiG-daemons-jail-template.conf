# Local jail rules
#
# See jail.conf(5) man page for more information


# The DEFAULT allows a global definition of the options. They can be overridden
# in each jail afterwards.

[DEFAULT]

#
# MISCELLANEOUS OPTIONS
#

# "ignoreip" can be an IP address, a CIDR mask or a DNS host. Fail2ban will not
# ban a host which matches an address in this list. Several addresses can be
# defined using space (and/or comma) separator.
ignoreip = 127.0.0.1/8 

# Some options used for actions

# Destination email address used solely for the interpolations in
# jail.{conf,local,d/*} configuration files.
destemail = root@__BASE_FQDN__

# Sender email address used solely for some actions
sender = root@__BASE_FQDN__


#
# JAILS
#

# IMPORTANT: jail name length is severely limited on some systems - keep short!

#
# SSH servers
#

# Default sshd jail is called ssh on Debian and sshd on RHEL/CentOS - always on
__NOT_DEB_COMMENTED__[ssh]
__IS_DEB_COMMENTED__[sshd]
enabled = True
port = ssh
filter = sshd
# Excess public keys should never result in ban
ignoreregex = Failed publickey for .* from .* port [0-9]+ ssh2: (RSA|DSA|ECDSA|ED25519) SHA256:.*$
action = iptables-ipset-proto6[name=SSH, bantime=900, port=ssh, protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 900
# A host is banned if it has generated "maxretry" during the last "findtime"
# seconds.
findtime = 300
# "maxretry" is the number of failures before a host get banned.
maxretry = 5

## Password cracking target for immediate ban of obvious password crackers
[sshd-pw-crack]
enabled = __ENABLE_SFTP_SUBSYS__
# Debian uses setup with auto backend and logpath defined in jail while
# CentOS/RHEL defines general helpers we can just reuse. 
__NOT_DEB_COMMENTED__logpath = /var/log/auth.log
__NOT_DEB_COMMENTED__backend = auto
__IS_DEB_COMMENTED__logpath = %(sshd_log)s
__IS_DEB_COMMENTED__backend = %(sshd_backend)s
port = __SFTP_SUBSYS_PORT__
filter = sshd-pw-crack
# Excess public keys should never result in ban
ignoreregex = Failed publickey for .* from .* port [0-9]+ ssh2: (RSA|DSA|ECDSA|ED25519) SHA256:.*$
# NOTE: 2147483 is max bantime for ipset
action = iptables-ipset-proto6[name=SSH-ABUSE, bantime=2147483, port=ssh, protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 2147483
findtime = 300
maxretry = 0

# Special abuse target for automatic ban of other obvious abuse and for manual daily
# ban of known offenders
[sshd-abuse]
enabled = __ENABLE_SFTP_SUBSYS__
# Debian uses setup with auto backend and logpath defined in jail while
# CentOS/RHEL defines general helpers we can just reuse. 
__NOT_DEB_COMMENTED__logpath = /var/log/auth.log
__NOT_DEB_COMMENTED__backend = auto
__IS_DEB_COMMENTED__logpath = %(sshd_log)s
__IS_DEB_COMMENTED__backend = %(sshd_backend)s
port = __SFTP_SUBSYS_PORT__
# RHEL/CentOS has aggressive filter with various additional scan patterns
# NOTE: recently renamed from sshd-aggressive                                                          
__IS_DEB_COMMENTED__#filter = sshd-aggressive
__IS_DEB_COMMENTED__filter = sshd[mode=aggressive]
__NOT_DEB_COMMENTED__filter = sshd
# Excess public keys should never result in ban
ignoreregex = Failed publickey for .* from .* port [0-9]+ ssh2: (RSA|DSA|ECDSA|ED25519) SHA256:.*$
action = iptables-ipset-proto6[name=SSH-ABUSE, bantime=86400, port=ssh, protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 86400
findtime = 3600
maxretry = 15

#
# MiG native IO services
#

## SFTP login failures
[mig-sftp]
enabled = __ENABLE_SFTP__
logpath = __MIG_STATE__/log/auth.log
# Use pyinotify or polling rather than systemd log
backend = auto
port = __SFTP_PORT__
filter = MiG-daemons
# Excess public keys should never result in ban
ignoreregex = ^.* IP: .+, Protocol: ((?!sftp,).)* Type: .+, Username: .+, Message: .+$
# NOTE: target all common forwarded and real IO service ports 
action = iptables-ipset-proto6[name=MiG-DAEMONS, bantime=900, port="__FAIL2BAN_DAEMON_PORTS__", protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 900
# A host is banned if it has generated "maxretry" during the last "findtime"
# seconds.
findtime = 100
# "maxretry" is the number of failures before a host get banned.
maxretry = 0

## SFTP handshake error for banning aggressive weak security scanning bots
[mig-sftp-handshake]
enabled = __ENABLE_SFTP__
logpath = __MIG_STATE__/log/sftp.log
# Use pyinotify or polling rather than systemd log
backend = auto
port = __SFTP_PORT__
filter = MiG-daemons-handshake
ignoreregex =
# NOTE: target all common forwarded and real IO service ports 
action = iptables-ipset-proto6[name=MiG-DAEMONS, bantime=3600, port="__FAIL2BAN_DAEMON_PORTS__", protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 3600
findtime = 600
maxretry = 8

## SFTP password cracking target for immediate ban of obvious attackers
[mig-sftp-pw-crack]
enabled = __ENABLE_SFTP__
logpath = __MIG_STATE__/log/auth.log
# Use pyinotify or polling rather than systemd log
backend = auto
port = __SFTP_PORT__
filter = MiG-daemons-pw-crack
ignoreregex = ^.* IP: .+, Protocol: ((?!sftp,).)* Type: .+, Username: .+, Message: .+$
# NOTE: target all common forwarded and real IO service ports 
action = iptables-ipset-proto6[name=MiG-DAEMONS, bantime=864000, port="__FAIL2BAN_DAEMON_PORTS__", protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 864000
findtime = 100
maxretry = 0

## FTPS login failures
[mig-ftps]
enabled = __ENABLE_FTPS__
logpath = __MIG_STATE__/log/auth.log
# Use pyinotify or polling rather than systemd log
backend = auto
port = __FTPS_CTRL_PORT__
filter = MiG-daemons
ignoreregex = ^.* IP: .+, Protocol: ((?!ftps,).)* Type: .+, Username: .+, Message: .+$
# NOTE: target all common forwarded and real IO service ports
action = iptables-ipset-proto6[name=MiG-DAEMONS, bantime=900, port="__FAIL2BAN_DAEMON_PORTS__", protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 900
# A host is banned if it has generated "maxretry" during the last "findtime"
# seconds.
findtime = 100
# "maxretry" is the number of failures before a host get banned.
maxretry = 0

## FTPS password cracking target for immediate ban of obvious attackers
[mig-ftps-pw-crack]
enabled = __ENABLE_FTPS__
logpath = __MIG_STATE__/log/auth.log
# Use pyinotify or polling rather than systemd log
backend = auto
port = __FTPS_CTRL_PORT__
filter = MiG-daemons-pw-crack
ignoreregex = ^.* IP: .+, Protocol: ((?!ftps,).)* Type: .+, Username: .+, Message: .+$
# NOTE: target all common forwarded and real IO service ports
action = iptables-ipset-proto6[name=MiG-DAEMONS, bantime=864000, port="__FAIL2BAN_DAEMON_PORTS__", protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 864000
findtime = 100
maxretry = 0

## WebDAVS login failures
[mig-davs]
enabled = __ENABLE_DAVS__
logpath = __MIG_STATE__/log/auth.log
# Use pyinotify or polling rather than systemd log
backend = auto
port = __DAVS_PORT__
filter = MiG-daemons
ignoreregex = ^.* IP: .+, Protocol: ((?!davs,).)* Type: .+, Username: .+, Message: .+$
# NOTE: target all common forwarded and real IO service ports
action = iptables-ipset-proto6[name=MiG-DAEMONS, bantime=900, port="__FAIL2BAN_DAEMON_PORTS__", protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 900
# A host is banned if it has generated "maxretry" during the last "findtime"
# seconds.
findtime = 100
# "maxretry" is the number of failures before a host get banned.
# NOTE: windows client auto retry many times per login so leave it high
maxretry = 0

## WebDAVS password cracking target for immediate ban of obvious attackers
[mig-davs-pw-crack]
enabled = __ENABLE_DAVS__
logpath = __MIG_STATE__/log/auth.log
# Use pyinotify or polling rather than systemd log
backend = auto
port = __DAVS_PORT__
filter = MiG-daemons-pw-crack
ignoreregex = ^.* IP: .+, Protocol: ((?!davs,).)* Type: .+, Username: .+, Message: .+$
# NOTE: target all common forwarded and real IO service ports
action = iptables-ipset-proto6[name=MiG-DAEMONS, bantime=864000, port="__FAIL2BAN_DAEMON_PORTS__", protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 864000
findtime = 100
maxretry = 0

## OpenID login failures
[mig-openid]
enabled = __ENABLE_OPENID__
logpath = __MIG_STATE__/log/auth.log
# Use pyinotify or polling rather than systemd log
backend = auto
port = __OPENID_PORT__
filter = MiG-daemons
ignoreregex = ^.* IP: .+, Protocol: ((?!openid,).)* Type: .+, Username: .+, Message: .+$
# NOTE: target all common forwarded and real IO service ports
action = iptables-ipset-proto6[name=MiG-DAEMONS, bantime=900, port="__FAIL2BAN_DAEMON_PORTS__", protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 900
# A host is banned if it has generated "maxretry" during the last "findtime"
# seconds.
findtime = 100
# "maxretry" is the number of failures before a host get banned.
maxretry = 0

## OpenID password cracking target for immediate ban of obvious attackers
[mig-openid-pw-crack]
enabled = __ENABLE_OPENID__
logpath = __MIG_STATE__/log/auth.log
# Use pyinotify or polling rather than systemd log
backend = auto
port = __OPENID_PORT__
filter = MiG-daemons-pw-crack
ignoreregex = ^.* IP: .+, Protocol: ((?!openid,).)* Type: .+, Username: .+, Message: .+$
# NOTE: target all common forwarded and real IO service ports
action = iptables-ipset-proto6[name=MiG-DAEMONS, bantime=864000, port="__FAIL2BAN_DAEMON_PORTS__", protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 864000
findtime = 100
maxretry = 0

## Web vulnerability scans on public web addresses
[mig-webscan]
enabled = True
logpath = __MIG_STATE__/log/chkchroot.log
# Use pyinotify or polling rather than systemd log
backend = auto
port = 443
filter = MiG-daemons-webscan
ignoreregex = 
# NOTE: target all common forwarded and real IO service ports
action = iptables-ipset-proto6[name=MiG-DAEMONS, bantime=900, port="__FAIL2BAN_DAEMON_PORTS__", protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 864000
findtime = 100
maxretry = 0

## Seafile login failures
# based on suggestion from https://manual.seafile.com/security/fail2ban.html
[mig-seafile]
enabled = __SEAFILE_LOCAL_INSTANCE__
logpath = __MIG_BASE__/seafile/logs/seahub.log
# Use pyinotify or polling rather than systemd log
backend = auto
port = __SEAFILE_SEAHUB_PORT__
filter = seafile-auth
ignoreregex = 
# NOTE: target all common forwarded and real IO service ports
action = iptables-ipset-proto6[name=MiG-DAEMONS, bantime=900, port="__FAIL2BAN_DAEMON_PORTS__", protocol=tcp]
# "bantime" is the number of seconds that a host is banned.
bantime = 900
# A host is banned if it has generated "maxretry" during the last "findtime"
# seconds.
findtime = 600
# "maxretry" is the number of failures before a host get banned.
maxretry = 8
