#!/bin/bash

### BEGIN INIT INFO
# Provides:          migrid
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Minimum intrusion Grid daemons
# Description:       MiG is a Grid middleware with minimal user and resource requirements
### END INIT INFO

set -e 

umask 022

. /lib/lsb/init-functions

if [ -f /etc/default/migrid ]; then
    . /etc/default/migrid
fi

# define default locations and user for MiG if not set:
if [ -z "$MIG_USER" ]; then 
    MIG_USER=mig
fi
if [ -z "$MIG_PATH" ]; then
    MIG_PATH=/home/${MIG_USER}
fi
# more configurable paths:
if [ -z "$MIG_STATE" ]; then 
    MIG_STATE=${MIG_PATH}/state
fi
if [ -z "$MIG_CODE" ]; then 
    MIG_CODE=${MIG_PATH}/mig
fi
if [ -z "$MIG_SFTPSUBSYS_CONF" ]; then 
    MIG_SFTPSUBSYS_CONF=/etc/ssh/sshd_config-MiG-sftp-subsys
fi
# you probably do not want to modify these...
PID_DIR=${PID_DIR:-/var/run}
MIG_LOG=${MIG_STATE}/log
MIG_SCRIPT=${MIG_CODE}/server/grid_script.py
MIG_MONITOR=${MIG_CODE}/server/grid_monitor.py
MIG_SSHMUX=${MIG_CODE}/server/grid_sshmux.py
MIG_EVENTS=${MIG_CODE}/server/grid_events.py
MIG_CRON=${MIG_CODE}/server/grid_cron.py
MIG_TRANSFERS=${MIG_CODE}/server/grid_transfers.py
MIG_OPENID=${MIG_CODE}/server/grid_openid.py
MIG_SFTP=${MIG_CODE}/server/grid_sftp.py
MIG_SFTPSUBSYS=/usr/sbin/sshd
MIG_WEBDAVS=${MIG_CODE}/server/grid_webdavs.py
MIG_DAVS=${MIG_CODE}/server/grid_davs.py
MIG_FTPS=${MIG_CODE}/server/grid_ftps.py
MIG_IMNOTIFY=${MIG_CODE}/server/grid_imnotify.py
MIG_VMPROXY=${MIG_CODE}/server/grid_vmproxy.py

show_usage() {
    echo "Usage: migrid {start|stop|status|restart|reload} [daemon]"
    echo "where daemon is left empty for all or given as one of the following"
    echo "(script|monitor|sshmux|events|cron|transfers|openid|sftp|sftpsubsys|webdavs|davs|ftps|imnotify|vmproxy|all)"
}

test_sftpsubsys_enabled() {
    su - ${MIG_USER} -c "cd ${MIG_CODE}/server && python -c 'from shared.conf import get_configuration_object; print get_configuration_object().site_enable_sftp_subsys' | grep -q True"
    SFTPSUBSYS_ENABLED=$?
    if [ $SFTPSUBSYS_ENABLED -ne 0 ]; then
        echo "sftpsubsys not enabled in MiGserver conf - skipping"
    fi
    return $SFTPSUBSYS_ENABLED
}

# NOTE: we cannot easily pass daemon std output to a x.out log file on Debian
#       and we do not need to explicitly forward MIG_CONF value.

start_script() {
    DAEMON_PATH=${MIG_SCRIPT}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG server daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER}  --chuid ${MIG_USER} --background --name ${SHORT_NAME} --startas ${DAEMON_PATH} ; then
	# some input to kick the server into gear ...
	echo "" >> ${MIG_CODE}/server/server.stdin
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_monitor() {
    DAEMON_PATH=${MIG_MONITOR}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG monitor daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER}  --chuid ${MIG_USER} --background --name ${SHORT_NAME} --startas ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_sshmux() {
    DAEMON_PATH=${MIG_SSHMUX}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG sshmux daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER}  --chuid ${MIG_USER} --background --name ${SHORT_NAME} --startas ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_events() {
    DAEMON_PATH=${MIG_EVENTS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG events daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER} --chuid ${MIG_USER} --background --name ${SHORT_NAME} --startas ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_cron() {
    DAEMON_PATH=${MIG_CRON}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG cron daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER} --chuid ${MIG_USER} --background --name ${SHORT_NAME} --startas ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_transfers() {
    DAEMON_PATH=${MIG_TRANSFERS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG transfers daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER} --chuid ${MIG_USER} --background --name ${SHORT_NAME} --startas ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_openid() {
    DAEMON_PATH=${MIG_OPENID}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG openid daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER}  --chuid ${MIG_USER} --background --name ${SHORT_NAME} --startas ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_sftp() {
    DAEMON_PATH=${MIG_SFTP}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG sftp daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER}  --chuid ${MIG_USER} --background --name ${SHORT_NAME} --startas ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_webdavs() {
    DAEMON_PATH=${MIG_WEBDAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG webdavs daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER}  --chuid ${MIG_USER} --background --name ${SHORT_NAME} --startas ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_davs() {
    DAEMON_PATH=${MIG_DAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG davs daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER}  --chuid ${MIG_USER} --background --name ${SHORT_NAME} --startas ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_ftps() {
    DAEMON_PATH=${MIG_FTPS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG ftps daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER}  --chuid ${MIG_USER} --background --name ${SHORT_NAME} --startas ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_imnotify() {
    DAEMON_PATH=${MIG_IMNOTIFY}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG IM notify daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER}  --chuid ${MIG_USER} --background --name ${SHORT_NAME} --startas ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_vmproxy() {
    DAEMON_PATH=${MIG_VMPROXY}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG VM proxy daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER}  --chuid ${MIG_USER} --background --name ${SHORT_NAME} --startas ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_sftpsubsys() {
    test_sftpsubsys_enabled || return
    DAEMON_PATH=${MIG_SFTPSUBSYS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    log_daemon_msg "Starting MiG sftpsubsys daemon" ${SHORT_NAME} || true
    ${DAEMON_PATH} -f ${MIG_SFTPSUBSYS_CONF}
    log_end_msg $? || true
}

start_all() {
    start_script
    start_monitor
    start_sshmux
    start_events
    start_cron
    start_transfers
    start_openid
    start_sftp
    start_sftpsubsys
    # Use wsgidav implementation instead of outdated PyWebDav one
    start_webdavs
    #start_davs
    start_ftps
    start_imnotify
    start_vmproxy
}

# NOTE: We always manualy remove pid files as only the Debian start-stop-daemon
# supports the --remove-pidfile flag
stop_script() {
    DAEMON_PATH=${MIG_SCRIPT}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG server" ${SHORT_NAME} || true
    # Try graceful shutdown so that state is properly saved
    start-stop-daemon --stop --signal INT --quiet --oknodo --pidfile ${PID_FILE}
    for delay in 1 2 3; do
	status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} || break
	sleep $delay
    done
    # Force kill if still running
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} && \
	start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE}
    if ! status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}; then
	rm -f ${PID_FILE}
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_monitor() {
    DAEMON_PATH=${MIG_MONITOR}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG monitor" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} ; then
        rm -f ${PID_FILE}
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_sshmux() {
    DAEMON_PATH=${MIG_SSHMUX}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG sshmux" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} ; then
        rm -f ${PID_FILE}
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_events() {
    DAEMON_PATH=${MIG_EVENTS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG events" ${SHORT_NAME} || true
    # Try graceful shutdown so that state is properly saved
    start-stop-daemon --stop --signal INT --quiet --oknodo --pidfile ${PID_FILE}
    for delay in 1 2 3; do
	status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} || break
	sleep $delay
    done
    # Force kill if still running
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} && \
	start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE}
    if ! status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}; then
	rm -f ${PID_FILE}
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_cron() {
    DAEMON_PATH=${MIG_CRON}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG cron" ${SHORT_NAME} || true
    # Try graceful shutdown so that state is properly saved
    start-stop-daemon --stop --signal INT --quiet --oknodo --pidfile ${PID_FILE}
    for delay in 1 2 3; do
	status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} || break
	sleep $delay
    done
    # Force kill if still running
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} && \
	start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE}
    if ! status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}; then
	rm -f ${PID_FILE}
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_transfers() {
    DAEMON_PATH=${MIG_TRANSFERS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG transfers" ${SHORT_NAME} || true
    # Try graceful shutdown so that state is properly saved
    start-stop-daemon --stop --signal INT --quiet --oknodo --pidfile ${PID_FILE}
    for delay in 1 2 3; do
	status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} || break
	sleep $delay
    done
    # Force kill if still running
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} && \
	start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE}
    if ! status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}; then
	rm -f ${PID_FILE}
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_openid() {
    DAEMON_PATH=${MIG_OPENID}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG openid" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} ; then
        rm -f ${PID_FILE}
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_sftp() {
    DAEMON_PATH=${MIG_SFTP}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG sftp" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} ; then
        rm -f ${PID_FILE}
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_webdavs() {
    DAEMON_PATH=${MIG_WEBDAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG webdavs" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} ; then
        rm -f ${PID_FILE}
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_davs() {
    DAEMON_PATH=${MIG_DAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG davs" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} ; then
        rm -f ${PID_FILE}
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_ftps() {
    DAEMON_PATH=${MIG_FTPS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG ftps" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} ; then
        rm -f ${PID_FILE}
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_imnotify() {
    DAEMON_PATH=${MIG_IMNOTIFY}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG IM notify" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} ; then
        rm -f ${PID_FILE}
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_vmproxy() {
    DAEMON_PATH=${MIG_VMPROXY}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG VM proxy" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} ; then
        rm -f ${PID_FILE}
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_sftpsubsys() {
    test_sftpsubsys_enabled || return
    DAEMON_PATH=${MIG_SFTPSUBSYS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    log_daemon_msg "Stopping MiG sftpsubsys" ${SHORT_NAME} || true
    pkill -f "${DAEMON_PATH} -f ${MIG_SFTPSUBSYS_CONF}"
    log_end_msg $? || true
}

stop_all() {
    # Stop script first to leave it some time to save state
    stop_script
    stop_monitor
    stop_sshmux
    stop_events
    stop_cron
    stop_transfers
    stop_openid
    stop_sftp
    stop_sftpsubsys
    # Use wsgidav implementation instead of outdated PyWebDav one
    stop_webdavs
    #stop_davs
    stop_ftps
    stop_imnotify
    stop_vmproxy
}

# NOTE: start-stop-daemon --stop --signal HUP BLA just means send HUP signal
reload_script() {
    DAEMON_PATH=${MIG_SCRIPT}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Reloading MiG server" ${SHORT_NAME} || true
    if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile ${PID_FILE} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
reload_monitor() {
    DAEMON_PATH=${MIG_MONITOR}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Reloading MiG monitor" ${SHORT_NAME} || true
    if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile ${PID_FILE} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
reload_sshmux() {
    DAEMON_PATH=${MIG_SSHMUX}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Reloading MiG sshmux" ${SHORT_NAME} || true
    if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile ${PID_FILE} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
reload_events() {
    DAEMON_PATH=${MIG_EVENTS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Reloading MiG events" ${SHORT_NAME} || true
    if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile ${PID_FILE} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
reload_cron() {
    DAEMON_PATH=${MIG_CRON}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Reloading MiG cron" ${SHORT_NAME} || true
    if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile ${PID_FILE} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
reload_transfers() {
    DAEMON_PATH=${MIG_TRANSFERS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Reloading MiG transfers" ${SHORT_NAME} || true
    if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile ${PID_FILE} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
reload_openid() {
    DAEMON_PATH=${MIG_OPENID}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Reloading MiG openid" ${SHORT_NAME} || true
    if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile ${PID_FILE} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
reload_sftp() {
    DAEMON_PATH=${MIG_SFTP}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Reloading MiG sftp" ${SHORT_NAME} || true
    if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile ${PID_FILE} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
reload_webdavs() {
    DAEMON_PATH=${MIG_WEBDAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Reloading MiG webdavs" ${SHORT_NAME} || true
    if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile ${PID_FILE} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
reload_davs() {
    DAEMON_PATH=${MIG_DAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Reloading MiG davs" ${SHORT_NAME} || true
    if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile ${PID_FILE} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
reload_ftps() {
    DAEMON_PATH=${MIG_FTPS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Reloading MiG ftps" ${SHORT_NAME} || true
    if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile ${PID_FILE} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
reload_imnotify() {
    DAEMON_PATH=${MIG_IMNOTIFY}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Reloading MiG IM notify" ${SHORT_NAME} || true
    if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile ${PID_FILE} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
reload_vmproxy() {
    DAEMON_PATH=${MIG_VMPROXY}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Reloading MiG VM proxy" ${SHORT_NAME} || true
    if start-stop-daemon --stop --signal HUP --quiet --oknodo --pidfile ${PID_FILE} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
reload_sftpsubsys() {
    test_sftpsubsys_enabled || return
    DAEMON_PATH=${MIG_SFTPSUBSYS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    log_daemon_msg "Reloading MiG sftpsubsys" ${SHORT_NAME} || true
    pkill -HUP -f "${DAEMON_PATH} -f ${MIG_SFTPSUBSYS_CONF}"
    log_end_msg $? || true
}

reload_all() {
    # Stop script first to leave it some time to save state
    reload_script
    reload_monitor
    reload_sshmux
    reload_events
    reload_cron
    reload_transfers
    reload_openid
    reload_sftp
    reload_sftpsubsys
    # Use wsgidav implementation instead of outdated PyWebDav one
    reload_webdavs
    #reload_davs
    reload_ftps
    reload_imnotify
    reload_vmproxy
}

status_script() {
    DAEMON_PATH=${MIG_SCRIPT}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}
}
status_monitor() {
    DAEMON_PATH=${MIG_MONITOR}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}
}
status_sshmux() {
    DAEMON_PATH=${MIG_SSHMUX}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}
}
status_events() {
    DAEMON_PATH=${MIG_EVENTS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}
}
status_cron() {
    DAEMON_PATH=${MIG_CRON}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}
}
status_transfers() {
    DAEMON_PATH=${MIG_TRANSFERS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}
}
status_openid() {
    DAEMON_PATH=${MIG_OPENID}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}
}
status_sftp() {
    DAEMON_PATH=${MIG_SFTP}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}
}
status_webdavs() {
    DAEMON_PATH=${MIG_WEBDAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}
}
status_davs() {
    DAEMON_PATH=${MIG_DAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}
}
status_ftps() {
    DAEMON_PATH=${MIG_FTPS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}
}
status_imnotify() {
    DAEMON_PATH=${MIG_IMNOTIFY}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}
}
status_vmproxy() {
    DAEMON_PATH=${MIG_VMPROXY}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME}
}
status_sftpsubsys() {
    test_sftpsubsys_enabled || return
    DAEMON_PATH=${MIG_SFTPSUBSYS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    pgrep -f "${DAEMON_PATH} -f ${MIG_SFTPSUBSYS_CONF}"
}

status_all() {
    status_script
    status_monitor
    status_sshmux
    status_events
    status_cron
    status_transfers
    status_openid
    status_sftp
    status_sftpsubsys
    # Use wsgidav implementation instead of outdated PyWebDav one
    status_webdavs
    #status_davs
    status_ftps
    status_imnotify
    status_vmproxy
}


### Main ###

# Exit cleanly if main daemon is missing
test -f ${MIG_SCRIPT} || exit 0

# Force valid target
case "$2" in
    script|monitor|sshmux|events|cron|transfers|openid|sftp|sftpsubsys|webdavs|davs|ftps|imnotify|vmproxy|all)
        TARGET="$2"
	;;
    '')
        TARGET="all"
	;;
    *)
	show_usage
	exit 1
	;;
esac

case "$1" in
    start)
        eval "start_$TARGET"
	;;
    stop)
        eval "stop_$TARGET"
	;;
    status)
        eval "status_$TARGET" && exit 0 || exit $?
	;;
    restart|force-reload)
        eval "stop_$TARGET"
        eval "start_$TARGET"
	;;
    reload)
        eval "reload_$TARGET"
	;;
    *)
	show_usage
	exit 1
	;;
esac
exit $?
