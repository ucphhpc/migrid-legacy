#!/bin/bash

### BEGIN INIT INFO
# Provides:          migrid
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Minimum intrusion Grid daemons
# Description:       MiG is a Grid middleware with minimal installation requirements
### END INIT INFO

set -e 

umask 022

. /lib/lsb/init-functions

if [ -f /etc/default/migrid ]; then
    . /etc/default/migrid
fi

# define default locations and user for MiG if not set:
if [ -z "$MIG_USER" ]; then 
    MIG_USER=mig
fi
if [ -z "$MIG_PATH" ]; then
    MIG_PATH=/home/${MIG_USER}
fi
# more configurable paths:
if [ -z "$MIG_STATE" ]; then 
    MIG_STATE=${MIG_PATH}/state
fi
if [ -z "$MIG_CODE" ]; then 
    MIG_CODE=${MIG_PATH}/mig
fi
if [ -n "$MIG_CONF" ]; then 
    CUSTOMCONF="MIG_CONF=\"$MIG_CONF\""
fi
# you probably do not want to modify these...
PID_DIR=${PID_DIR:-/var/run}
MIG_LOG=${MIG_STATE}/log
MIG_SCRIPT=${MIG_CODE}/server/grid_script.py
MIG_MONITOR=${MIG_CODE}/server/grid_monitor.py
MIG_SSHMUX=${MIG_CODE}/server/grid_sshmux.py
MIG_EVENTS=${MIG_CODE}/server/grid_events.py
MIG_OPENID=${MIG_CODE}/server/grid_openid.py
MIG_SFTP=${MIG_CODE}/server/grid_sftp.py
MIG_WEBDAVS=${MIG_CODE}/server/grid_webdavs.py
MIG_DAVS=${MIG_CODE}/server/grid_davs.py
MIG_FTPS=${MIG_CODE}/server/grid_ftps.py
DELAY=5

show_usage() {
    echo "Usage: migrid {start|stop|status|restart} [daemon]"
    echo "where daemon is left empty for all or given as one of the following"
    echo "(script|monitor|sshmux|events|openid|sftp|webdavs|davs|ftps|all)"
}

# NOTE: we cannot easily pass daemon std output to a x.out log file on Debian
#       and we do not need to explicitly forward MIG_CONF value.

start_script() {
    DAEMON_PATH=${MIG_SCRIPT}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG server daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER} --background --exec ${DAEMON_PATH} ; then
	# some input to kick the server into gear ...
	echo "" >> ${MIG_CODE}/server/server.stdin
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_monitor() {
    DAEMON_PATH=${MIG_MONITOR}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG monitor daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER} --background --exec ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_sshmux() {
    DAEMON_PATH=${MIG_SSHMUX}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG sshmux daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER} --background --exec ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_events() {
    DAEMON_PATH=${MIG_EVENTS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG events daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER} --background --exec ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_openid() {
    DAEMON_PATH=${MIG_OPENID}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG openid daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER} --background --exec ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_sftp() {
    DAEMON_PATH=${MIG_SFTP}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG sftp daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER} --background --exec ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_webdavs() {
    DAEMON_PATH=${MIG_WEBDAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG webdavs daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER} --background --exec ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_davs() {
    DAEMON_PATH=${MIG_DAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG davs daemon" ${SHORT_NAME} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER} --background --exec ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
start_ftps() {
    DAEMON_PATH=${MIG_FTPS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Starting MiG ftps daemon" ${MIG_FTPS} || true
    if start-stop-daemon --start --quiet --oknodo --pidfile ${PID_FILE} --make-pidfile --user ${MIG_USER} --background --exec ${DAEMON_PATH} ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}

start_all() {
    start_script
    start_monitor
    start_sshmux
    start_events
    start_openid
    start_sftp
    start_webdavs
    #start_davs
    start_ftps
}

stop_script() {
    DAEMON_PATH=${MIG_SCRIPT}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    pid=`pidofproc ${MIG_SCRIPT}`
    if [ -z "$pid" ]; then
	echo -n "MiG server is not running..."
	failure
	echo
    else
        # try a shutdown before killing it
	echo -n "SHUTDOWN MiG server (pid $pid)"
	echo SHUTDOWN >> $MIG_PATH/mig/server/server.stdin
	sleep ${DELAY}
	checkpid $pid
	KILLED=$?
	if [ $KILLED ]; then 
	    success;
	else 
	    failure
	    echo
	    echo -n "Killing MiG server"
	    killproc ${MIG_SCRIPT} -KILL;
	fi
	echo
    fi	
    rm -f /var/lock/subsys/MiG
    return $RET
}
stop_monitor() {
    DAEMON_PATH=${MIG_MONITOR}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG monitor" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} --remove-pidfile ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_sshmux() {
    DAEMON_PATH=${MIG_SSHMUX}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG sshmux" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} --remove-pidfile ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_events() {
    DAEMON_PATH=${MIG_EVENTS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG events" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} --remove-pidfile ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_openid() {
    DAEMON_PATH=${MIG_OPENID}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG openid" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} --remove-pidfile ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_sftp() {
    DAEMON_PATH=${MIG_SFTP}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG sftp" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} --remove-pidfile ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_webdavs() {
    DAEMON_PATH=${MIG_WEBDAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG webdavs" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} --remove-pidfile ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_davs() {
    DAEMON_PATH=${MIG_DAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG davs" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} --remove-pidfile ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}
stop_ftps() {
    DAEMON_PATH=${MIG_FTPS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    log_daemon_msg "Stopping MiG ftps" ${SHORT_NAME} || true
    if start-stop-daemon --stop --quiet --oknodo --pidfile ${PID_FILE} --remove-pidfile ; then
	log_end_msg 0 || true
    else
	log_end_msg 1 || true
    fi
}

stop_all() {
    stop_monitor
    stop_sshmux
    stop_events
    stop_openid
    stop_sftp
    stop_webdavs
    #stop_davs
    stop_ftps
    stop_script
}

status_script() {
    DAEMON_PATH=${MIG_SCRIPT}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} && exit 0 || exit $?
}
status_monitor() {
    DAEMON_PATH=${MIG_MONITOR}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} && exit 0 || exit $?
}
status_sshmux() {
    DAEMON_PATH=${MIG_SSHMUX}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} && exit 0 || exit $?
}
status_events() {
    DAEMON_PATH=${MIG_EVENTS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} && exit 0 || exit $?
}
status_openid() {
    DAEMON_PATH=${MIG_OPENID}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} && exit 0 || exit $?
}
status_sftp() {
    DAEMON_PATH=${MIG_SFTP}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} && exit 0 || exit $?
}
status_webdavs() {
    DAEMON_PATH=${MIG_WEBDAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} && exit 0 || exit $?
}
status_davs() {
    DAEMON_PATH=${MIG_DAVS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} && exit 0 || exit $?
}
status_ftps() {
    DAEMON_PATH=${MIG_FTPS}
    SHORT_NAME=$(basename ${DAEMON_PATH})
    PID_FILE="$PID_DIR/${SHORT_NAME}.pid"
    status_of_proc -p ${PID_FILE} ${DAEMON_PATH} ${SHORT_NAME} && exit 0 || exit $?
}

status_all() {
    status_script
    status_monitor
    status_sshmux
    status_events
    status_openid
    status_sftp
    status_webdavs
    #status_davs
    status_ftps
}


### Main ###

# Exit cleanly if main daemon is missing
test -f ${MIG_SCRIPT} || exit 0

# Force valid target
case "$2" in
    script|monitor|sshmux|events|openid|sftp|webdavs|davs|ftps|all)
        TARGET="$2"
	;;
    '')
        TARGET="all"
	;;
    *)
	show_usage
	exit 1
	;;
esac

case "$1" in
    start)
        eval "start_$TARGET"
	;;
    stop)
        eval "stop_$TARGET"
	;;
    status)
        eval "status_$TARGET"
	;;
    restart|reload|force-reload)
        eval "stop_$TARGET"
        eval "start_$TARGET"
	;;
    *)
	show_usage
	exit 1
	;;
esac
exit $?
