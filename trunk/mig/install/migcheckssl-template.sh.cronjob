#!/bin/bash
#
# Check letsencrypt ssl certificates for MiG servers
#
# The script depends on a configured getssl (https://github.com/srvrco/getssl)
# setup (please refer to ${cert_path}/README).
# If a new certificate is retrieved from letsencrypt then the appropriate
# certificates are updated and the apache and MiG services are restarted.
#
# IMPORTANT: if placed in /etc/cron.X the script filename must be
# something consisting entirely of upper and lower case letters, digits,
# underscores, and hyphens. I.e. if the script name contains e.g. a period,
# '.', it will be silently ignored!
# This is a limitation on the run-parts wrapper used by cron
# (see man run-parts for the rationale behind this).

export PATH="${PATH}:/usr/local/sbin"

domain="__BASE_FQDN__"
cert_path="__MIG_CERTS__/letsencrypt"
domain_cert_path="${cert_path}/${domain}"
server_key="${domain_cert_path}/server.key"
server_pem="${domain_cert_path}/server.pem"
server_crt_ca_pem="${domain_cert_path}/server.crt.ca.pem"
server_key_crt_ca_pem="${domain_cert_path}/server.key.crt.ca.pem"
combined_pem="${domain_cert_path}/combined.pem"
combined_pub="${domain_cert_path}/combined.pub"
getssl_url="https://raw.githubusercontent.com/srvrco/getssl/master/getssl"
getssl_tmp="/tmp/getssl"
getssl_script="getssl"
getssl_path=`which ${getssl_script} 2>/dev/null`
apache_services="httpd apache2"

# Check getssl script

if [ ! -x "${getssl_path}" ]; then
   echo "ERROR: Missing getssl script"
   exit 1
else   
   wget -O ${getssl_tmp} ${getssl_url} > /dev/null 2>&1
   diff -u -w ${getssl_tmp} ${getssl_path} || \
   echo "--- Updated LetsEncrypt script available - please verify+update ---"
   echo "${getssl_url}"
   rm -f ${getssl_tmp}
fi

# Generate getssl command with args

if [ "$#" -eq 0 ]; then
   getssl_cmd="${getssl_script} -q ${domain}"
else
   getssl_cmd="${getssl_script} $@ ${domain}"
fi

if [[ ${getssl_cmd} =~ .*-q.* ]]; then
   verbose=true
fi

if [ -z ${verbose} ]; then
   echo "getssl_cmd: ${getssl_cmd}"
   echo "cert_path: ${cert_path}"
   echo "domain_cert_path: ${domain_cert_path}"
   echo "server_key: ${server_key}" 
   echo "server_pem: ${server_pem}" 
   echo "server_crt_ca_pem: ${server_crt_ca_pem}"
   echo "server_key_crt_ca_pem: ${server_key_crt_ca_pem}"
   echo "combined_pem: ${combined_pem}"
   echo "combined_pub: ${combined_pub}"
fi

# Ensure domain certificate path

if [ ! -d "${domain_cert_path}" ]; then
   mkdir -p ${domain_cert_path}
fi

# Ensure file containing server: key + cert + ca

if [ ! -f "${server_key_crt_ca_pem}" ]; then
   touch ${server_key_crt_ca_pem}
fi

# Get timestamp of current certificate

if [ ! -f ${server_key_crt_ca_pem} ]; then
   org_mtime=(0)
else
   org_mtime=$(stat -c %Y ${server_key_crt_ca_pem})
fi

# Check for new certificate

${getssl_cmd}

# Get timestamp of new certificate

if [ ! -f ${server_key_crt_ca_pem} ]; then
   new_mtime=(0)
else
   new_mtime=$(stat -c %Y ${server_key_crt_ca_pem})
fi

# Update MiG specific certificate paths if certificate is updated

if [ ${org_mtime} -ne ${new_mtime} ]; then
   if [ -z ${verbose} ]; then
      echo "--- LetsEncrypt certificates updated ---"
      echo "Setting permissions and creating: ${combined_pub}"
   fi

   # Generate combined.pem
   #
   # Paramiko expects 'combined.pem' to contain plain-text part of 'server.key'
   # 'server_key_crt_ca_pem' is 'combined.pem'
   # without plain-text part of 'server.key'

   openssl rsa -in ${server_key} -text > ${server_pem}
   cat ${server_pem} ${server_crt_ca_pem} > ${combined_pem}

   # Set owner and permissions

   chown 0:0 ${domain_cert_path}/*.{key,pem}
   chown mig:mig ${combined_pem}
   chmod 400 ${domain_cert_path}/*.{key,pem}

   # Generate combined.pub

   ssh-keygen -y -f ${combined_pem} > ${combined_pub}

   # Restart migrid service

   if [ -z ${verbose} ]; then
      echo "--- Restarting MiG service ---"
   fi
   systemctl restart migrid

   # Restart apache service if it exits

   for apache_service in ${apache_services}; do
      systemctl status ${apache_service} > /dev/null 2>&1
      if [ $? -eq 0 ]; then
         if [ -z ${verbose} ]; then
            echo "--- Restarting apache service: ${apache_service} ---"
         fi
         systemctl restart ${apache_service}
      fi
   done
fi