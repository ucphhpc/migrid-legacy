Introduction:
=============
This document contains some notes about the installation of a MiG server on
a Debian box. Most of it probably applies to most other UNIX/Linux distributions.
MiG relies on the Apache web server for all web interfaces and
optionally the MoinMoin wiki, but apart from that you will only need a
Python interpreter to run your own grid using the MiG software. 


Installation and configuration of the MiG server software:
==========================================================
We recommend creating a new user account on the system for running the
MiG daemons. This is not strictly required so you can skip this step if
you like, but then the apache configuration must be updated accordingly.

As root create an ordinary user, mig, for running the MiG server:
# su -
# useradd -m -U mig 

Login as the new user:
# su - mig

Download and unpack the MiG source or make a checkout from svn as described on:
http://code.google.com/p/migrid/source/checkout

At this point it may be comfortable to copy some of the basic
account configuration files from mig/install/mig-user to ~/ but this is
not required.

Create and edit the server configuration to fit the particular server:
# cd ~/path/to/migbase/mig/server
# cp MiGserver-localhost.conf MiGserver-MYSERVER.conf
# ln -s MiGserver-MYSERVER.conf MiGserver.conf
# $EDITOR MiGserver.conf
Now change options like server_fqdn and paths to fit your installation.

You can check that the configuration is ok by running the checkconf.py
script:
python checkconf.py

If any paths are missing it will offer to help you creating them. 
Please note that all the 'Xstdin' paths *must* be created as pipes.

Log out the MiG user
# logout


Installation and configuration of Apache:
=========================================
MiG works with Apache 1.3 or 2.x, so instructions for both are included here.
If in doubt you should use the 2.x version.

The apache configuration commands require administrator privileges so
you will have to switch to the root user or prepend sudo to all the
commands in this section.

Apache 1.3
----------
If you already are familiar with apache 1.3 and want to stick with that
simply install apache 1.3 and mod-ssl: 
# aptitude install apache libapache-mod-ssl

Stop the apache server for now
# /etc/init.d/apache stop

Enable the apache ssl module:
# apache-modconf apache enable mod_ssl
Enable the apache actions module:
# apache-modconf apache enable mod_actions
We also need the rewrite module, but it's already enabled by default.

There's no reason to allow user dirs, so we might as well remove the module:
# apache-modconf apache disable mod_userdir

Test that the basic HTTP server works after starting it with:
# /etc/init.d/apache start
----------

Apache 2.x
----------
If you prefer apache 2.x the install command is simply:
# aptitude install apache2-mpm-prefork

The other apache2 flavors *may* work, but they are untested with MiG.

Stop the apache server for now
# /etc/init.d/apache2 stop

Enable the apache ssl module:
# a2enmod ssl
Enable the apache actions module:
# a2enmod actions
Enable the apache rewrite module:
# a2enmod rewrite
Some of those may be already enabled by default.

Test that the basic HTTP server works after starting it with:
# /etc/init.d/apache2 start
----------

Test that the basic configuration works by pointing a browser to 
http://YOURSERVER/
Make sure that apache is actually running and binding to port 80 in case you
have problems connecting to the web server. 
If you still can't connect, try connecting to 
http://localhost/
from the server itself to avoid firewall issues.

On our own MiG servers we use a simple shell script to configure the
firewall, but you may use whatever firewall setup you want as long as
you keep at least tcp port 443 open for https access by your users and
resources. In most cases you will also want to open for port 22 and 80
to allow ssh and plain http access. 

When you've made sure that your apache installation works you can move
on with the MiG specific configuration.

You will need a signed server certificate for your web server to allow
secure communication between the server and the grid participants.
You can create your own self-signed certificate or get/buy a signed one
from one of the SSL certificate providers. It is also possible to set up
your own Certificate Authority (CA) and use it to sign your server
certificates. If you set up you own CA you can find instructions for
creating the apache formatted certificate and key in hostcert.HOWTO 

It is not necessary to update the main apache configuration
(/etc/apache/httpd.conf) to use the MiG software. It should be
sufficient to copy the MiG specific configuration to the apache
configuration directory. The actual details depend on the Apache
version, so use the same as you chose above.

Apache 1.3:
-----------
Copy the configuration to the conf.d dir:
# cp mig/apache/MiG.conf.Debian /etc/apache/conf.d/MiG.conf

Apache 2.x:
-----------
Copy the configuration to the sites-available dir:
# cp mig/apache/MiG.conf.Debian /etc/apache2/sites-available/MiG

Add the new site to your enabled sites:
# a2ensite MiG

Optionally disbale the default test site:
# a2dissite default
-----------

In that way it should automatically be included in the apache configuration.
If it doesn't, please make sure that httpd.conf contains the line:
Include /etc/apache/conf.d

Always check that this MiG.conf actually fits your setup. Especially the
server certificate and key lines may need modification to fit your setup.

Finally restart apache to activate the changes and check that you can
access the https pages on the server by pointing a browser with your
user certificate installed to:
https://YOURSERVER/cgi-bin/submitjob.py
and
https://YOURSERVER/cgi-sid/reqcert.py


Users and resources:
====================
Once your server is running you may add users and resources through the
wen interface (/cgi-sid/reqcert.py). Please make sure to configure the
admin_email option in the MiGserver.conf before you proceed as that
address is used for instruction emails when adding users and resources.

The user addition is bound to the certificate request page so you will
have to go through that form to get an email with instructions on
creating the user on the server or manually experiment with the format
of the mig/server/createuser.py script.
If you run your own CA you can try to follow the certificate
instructions but with your own setup in mind. Otherwise you can only add
users with an existing user certificate.

Resources are added through the Resources page (/cgi-bin/resadmin.py)
and after submitting the form you will receive further instructions by
email.


VGrid wiki:
===========
In order to support VGrid wikis you will need to install the MoinMoin package:
# aptitude install python-moinmoin

Now make sure that the paths match those in the
mig/cgi-bin/createvgrid.py CGI script so that creating a new VGrid succeeds.


Debugging:
==========
This section is only relevant if you experience problems with your
server either after te initial setup or after modifying it.
Problems with the web server can often be deugged by looking at the
apache logs in /var/log/apache/ . MiG problems on the other hand should
be visible from the output of the daemons and in the 'logfile' path
configured in MiGserver.conf . Please note that a relative path as
logfile results in a file of that name in the location where the code
file runs. That is, you will have log files from the daemons in the
mig/server directory but log files from cgi scripts in the mig/cgi-bin
and mig/cgi-sid directories. If you use an absolute path as logfile
instead all the log entries will end up in that file.
