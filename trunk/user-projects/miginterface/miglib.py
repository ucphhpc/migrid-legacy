#!/usr/bin/python 
# -*- coding: utf-8 -*-
# 
# miglib - a part of the MiG scripts
# Copyright (C) 2004-2010  MiG Core Developers lead by Brian Vinter
# 
# This file is part of MiG.
# 
# MiG is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# MiG is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# 

"""
This MiG python script was autogenerated by the MiG User Script Generator !!!
Any changes should be made in the generator and not here !!!
"""

import sys
import os
import getopt
import subprocess
import StringIO

def version():
    """Show version details"""
    print 'MiG User Scripts: $Revision: 1251 $,$Revision: 1251 $'

def check_var(name, var):
    """Check that conf variable, name, is set"""

    if not var:
        print "Error: Variable %s not set!" % name
        print "Please set in configuration file or through the command line"
        sys.exit(1)

def read_conf(conf, option):
    """Extract a value from the user conf file: format is KEY and VALUE
    separated by whitespace"""

    try:
        conf_file = open(conf, 'r')
        for line in conf_file:
            line = line.strip()
            # split on any whitespace and assure at least two parts
            parts = line.split() + ['', '']
            opt, val = parts[0], parts[1]
            if opt == option:
                return val
        conf_file.close()
    except Exception:
        return ''


def expand_name(path_list, server_flags, destinations):
    """Execute the corresponding server operation"""

    # Build the path_list string used in wild card expansion:
    # 'path="$1";path="$2";...;path=$N'
    # path_list may be a string or array
    if not isinstance(path_list, basestring):
        path_list = ";path=%s" % ";path=".join(path_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/expand.py"
    post_data = 'output_format=txt;flags=%s;%s;with_dest=%s' % (server_flags, path_list, destinations)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def cancel_job(job_list):
    """Execute the corresponding server operation"""

    # Build the job_list string used in wild card expansion:
    # 'job_id="$1";job_id="$2";...;job_id=$N'
    # job_list may be a string or array
    if not isinstance(job_list, basestring):
        job_list = ";job_id=%s" % ";job_id=".join(job_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl '
    target = ''
    location = "cgi-bin/jobaction.py"
    post_data = 'output_format=txt;flags=%s;action=cancel;%s' % (server_flags, job_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def cat_file(path_list):
    """Execute the corresponding server operation"""

    # Build the path_list string used in wild card expansion:
    # 'path="$1";path="$2";...;path=$N'
    # path_list may be a string or array
    if not isinstance(path_list, basestring):
        path_list = ";path=%s" % ";path=".join(path_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/cat.py"
    post_data = 'output_format=txt;flags=%s;%s' % (server_flags, path_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def show_doc(search, show):
    """Execute the corresponding server operation"""

    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/docs.py"
    post_data = 'output_format=txt;flags=%s;search=%s;show=%s' % (server_flags, search, show)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def get_file(src_path, dst_path):
    """Execute the corresponding server operation"""

    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed --create-dirs'
    target = '--output %s' % dst_path
    location = "cert_redirect/%s" % src_path.lstrip("/")
    post_data = ""
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def head_file(lines, path_list):
    """Execute the corresponding server operation"""

    # Build the path_list string used in wild card expansion:
    # 'path="$1";path="$2";...;path=$N'
    # path_list may be a string or array
    if not isinstance(path_list, basestring):
        path_list = ";path=%s" % ";path=".join(path_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/head.py"
    post_data = 'output_format=txt;flags=%s;%s;lines=%s' % (server_flags, path_list, lines)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def job_action(action, job_list):
    """Execute the corresponding server operation"""

    # Build the job_list string used in wild card expansion:
    # 'job_id="$1";job_id="$2";...;job_id=$N'
    # job_list may be a string or array
    if not isinstance(job_list, basestring):
        job_list = ";job_id=%s" % ";job_id=".join(job_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl '
    target = ''
    location = "cgi-bin/jobaction.py"
    post_data = 'output_format=txt;flags=%s;action=%s;%s' % (server_flags, action, job_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def job_liveio(action, job_id, src_list, dst):
    """Execute the corresponding server operation"""

    # Build the src_list string used in wild card expansion:
    # 'src="$1";src="$2";...;src=$N'
    # src_list may be a string or array
    if not isinstance(src_list, basestring):
        src_list = ";src=%s" % ";src=".join(src_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/liveio.py"
    post_data = 'output_format=txt;flags=%s;action=%s;job_id=%s;%s;dst=%s' % (server_flags, action, job_id, src_list, dst)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def ls_file(path_list):
    """Execute the corresponding server operation"""

    # Build the path_list string used in wild card expansion:
    # 'path="$1";path="$2";...;path=$N'
    # path_list may be a string or array
    if not isinstance(path_list, basestring):
        path_list = ";path=%s" % ";path=".join(path_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/ls.py"
    post_data = 'output_format=txt;flags=%s;%s' % (server_flags, path_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def mk_dir(path_list):
    """Execute the corresponding server operation"""

    # Build the path_list string used in wild card expansion:
    # 'path="$1";path="$2";...;path=$N'
    # path_list may be a string or array
    if not isinstance(path_list, basestring):
        path_list = ";path=%s" % ";path=".join(path_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl '
    target = ''
    location = "cgi-bin/mkdir.py"
    post_data = 'output_format=txt;flags=%s;%s' % (server_flags, path_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def job_mqueue(action, queue, msg):
    """Execute the corresponding server operation"""

    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/mqueue.py"
    post_data = 'output_format=txt;flags=%s;action=%s;queue=%s;msg=%s' % (server_flags, action, queue, msg)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def mv_file(src_list, dst):
    """Execute the corresponding server operation"""

    # Build the src_list string used in wild card expansion:
    # 'src="$1";src="$2";...;src=$N'
    # src_list may be a string or array
    if not isinstance(src_list, basestring):
        src_list = ";src=%s" % ";src=".join(src_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/mv.py"
    post_data = 'output_format=txt;flags=%s;dst=%s;%s' % (server_flags, dst, src_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def put_file(src_path, dst_path, submit_mrsl, extract_package):
    """Execute the corresponding server operation"""

    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)

    content_type = "''"
    if submit_mrsl and extract_package:
        content_type = 'Content-Type:submitandextract'
    elif submit_mrsl:
        content_type = 'Content-Type:submitmrsl'
    elif extract_package:
        content_type = 'Content-Type:extractpackage'


    curl = 'curl --compressed'
    target = '--upload-file %s --header %s -X CERTPUT' % (src_path, content_type)
    location = "%s" % dst_path.lstrip("/")
    post_data = ""
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def read_file(first, last, src_path, dst_path):
    """Execute the corresponding server operation"""

    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = '--output %s' % dst_path
    location = "cgi-bin/rangefileaccess.py"
    post_data = ""
    query = '?output_format=txt;flags=%s;file_startpos=%s;file_endpos=%s;path=%s' % (server_flags, first, last, src_path)
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def rm_file(path_list):
    """Execute the corresponding server operation"""

    # Build the path_list string used in wild card expansion:
    # 'path="$1";path="$2";...;path=$N'
    # path_list may be a string or array
    if not isinstance(path_list, basestring):
        path_list = ";path=%s" % ";path=".join(path_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl '
    target = ''
    location = "cgi-bin/rm.py"
    post_data = 'output_format=txt;flags=%s;%s' % (server_flags, path_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def rm_dir(path_list):
    """Execute the corresponding server operation"""

    # Build the path_list string used in wild card expansion:
    # 'path="$1";path="$2";...;path=$N'
    # path_list may be a string or array
    if not isinstance(path_list, basestring):
        path_list = ";path=%s" % ";path=".join(path_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl '
    target = ''
    location = "cgi-bin/rmdir.py"
    post_data = 'output_format=txt;flags=%s;%s' % (server_flags, path_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def stat_file(path_list):
    """Execute the corresponding server operation"""

    # Build the path_list string used in wild card expansion:
    # 'path="$1";path="$2";...;path=$N'
    # path_list may be a string or array
    if not isinstance(path_list, basestring):
        path_list = ";path=%s" % ";path=".join(path_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/stat.py"
    post_data = 'output_format=txt;flags=%s;%s' % (server_flags, path_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def job_status(job_list, max_job_count):
    """Execute the corresponding server operation"""

    # Build the job_list string used in wild card expansion:
    # 'job_id="$1";job_id="$2";...;job_id=$N'
    # job_list may be a string or array
    if not isinstance(job_list, basestring):
        job_list = ";job_id=%s" % ";job_id=".join(job_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/jobstatus.py"
    post_data = 'output_format=txt;flags=%s;max_jobs=%s;%s' % (server_flags, max_job_count, job_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def submit_file(src_path, dst_path, submit_mrsl, extract_package):
    """Execute the corresponding server operation"""

    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)

    content_type = "''"
    if submit_mrsl and extract_package:
        content_type = 'Content-Type:submitandextract'
    elif submit_mrsl:
        content_type = 'Content-Type:submitmrsl'
    elif extract_package:
        content_type = 'Content-Type:extractpackage'


    curl = 'curl '
    target = '--upload-file %s --header %s -X CERTPUT' % (src_path, content_type)
    location = "%s" % dst_path.lstrip("/")
    post_data = ""
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def resubmit_job(job_list):
    """Execute the corresponding server operation"""

    # Build the job_list string used in wild card expansion:
    # 'job_id="$1";job_id="$2";...;job_id=$N'
    # job_list may be a string or array
    if not isinstance(job_list, basestring):
        job_list = ";job_id=%s" % ";job_id=".join(job_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl '
    target = ''
    location = "cgi-bin/resubmit.py"
    post_data = 'output_format=txt;flags=%s;%s' % (server_flags, job_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def tail_file(lines, path_list):
    """Execute the corresponding server operation"""

    # Build the path_list string used in wild card expansion:
    # 'path="$1";path="$2";...;path=$N'
    # path_list may be a string or array
    if not isinstance(path_list, basestring):
        path_list = ";path=%s" % ";path=".join(path_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/tail.py"
    post_data = 'output_format=txt;flags=%s;lines=%s;%s' % (server_flags, lines, path_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def touch_file(path_list):
    """Execute the corresponding server operation"""

    # Build the path_list string used in wild card expansion:
    # 'path="$1";path="$2";...;path=$N'
    # path_list may be a string or array
    if not isinstance(path_list, basestring):
        path_list = ";path=%s" % ";path=".join(path_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl '
    target = ''
    location = "cgi-bin/touch.py"
    post_data = 'output_format=txt;flags=%s;%s' % (server_flags, path_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def truncate_file(size, path_list):
    """Execute the corresponding server operation"""

    # Build the path_list string used in wild card expansion:
    # 'path="$1";path="$2";...;path=$N'
    # path_list may be a string or array
    if not isinstance(path_list, basestring):
        path_list = ";path=%s" % ";path=".join(path_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/truncate.py"
    post_data = 'output_format=txt;flags=%s;size=%s;%s' % (server_flags, size, path_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def unzip_file(src_list, dst):
    """Execute the corresponding server operation"""

    # Build the src_list string used in wild card expansion:
    # 'src="$1";src="$2";...;src=$N'
    # src_list may be a string or array
    if not isinstance(src_list, basestring):
        src_list = ";src=%s" % ";src=".join(src_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/unzip.py"
    post_data = 'output_format=txt;flags=%s;dst=%s;%s' % (server_flags, dst, src_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def wc_file(path_list):
    """Execute the corresponding server operation"""

    # Build the path_list string used in wild card expansion:
    # 'path="$1";path="$2";...;path=$N'
    # path_list may be a string or array
    if not isinstance(path_list, basestring):
        path_list = ";path=%s" % ";path=".join(path_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl '
    target = ''
    location = "cgi-bin/wc.py"
    post_data = 'output_format=txt;flags=%s;%s' % (server_flags, path_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def write_file(first, last, src_path, dst_path):
    """Execute the corresponding server operation"""

    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = '--upload-file %s' % src_path
    location = "cgi-bin/rangefileaccess.py"
    post_data = ""
    query = '?output_format=txt;flags=%s;file_startpos=%s;file_endpos=%s;path=%s' % (server_flags, first, last, dst_path)
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)


def zip_file(current_dir, src_list, dst):
    """Execute the corresponding server operation"""

    # Build the src_list string used in wild card expansion:
    # 'src="$1";src="$2";...;src=$N'
    # src_list may be a string or array
    if not isinstance(src_list, basestring):
        src_list = ";src=%s" % ";src=".join(src_list)
    
    if not ca_cert_file:
        ca_check = '--insecure'
    else:
        ca_check = "--cacert %s" % (ca_cert_file)

    if not password:
        password_check = ''
    else:
        password_check = "--pass %s" % (password)

    timeout = ''
    if max_time:
        timeout += "--max-time %s" % (max_time)
    if connect_timeout:
        timeout += " --connect-timeout %s" % (connect_timeout)


    curl = 'curl --compressed'
    target = ''
    location = "cgi-bin/zip.py"
    post_data = 'output_format=txt;flags=%s;current_dir=%s;dst=%s;%s' % (server_flags, current_dir, dst, src_list)
    query = ""
    data = ''
    if post_data:
        data = '--data "%s"' % post_data
    curl_opts = "--location --fail --silent --show-error"
    command = "%s %s --cert %s --key %s %s %s %s %s %s --url '%s/%s%s'" % \
        (curl, curl_opts, cert_file, key_file, data, ca_check, password_check,
        timeout, target, mig_server, location, query)
    proc = subprocess.Popen(command, shell=True, bufsize=0,
        stdout=subprocess.PIPE, stderr=subprocess.STDOUT, close_fds=True)
    out_buffer = StringIO.StringIO(proc.communicate()[0])
    proc.stdout.close()
    out = out_buffer.readlines()
    exit_code = proc.returncode

    return (exit_code, out)



# === Main ===

verbose = 0
conf = os.path.expanduser("~/.mig/miguser.conf")
flags = ""
mig_server = ""
server_flags = ""
script_path = sys.argv[0]
script_name = os.path.basename(script_path)
script_dir = os.path.dirname(script_path)

if not os.path.isfile(conf):
    print "Failed to read configuration file: %s" % (conf)
    sys.exit(1)

if verbose:
    print "using configuration in %s" % (conf)

if not mig_server:
    mig_server = read_conf(conf, 'migserver')

def expand_path(path):
    return os.path.expanduser(os.path.expandvars(path))

# Force tilde and variable expansion on path vars
cert_file = expand_path(read_conf(conf, 'certfile'))
key_file = expand_path(read_conf(conf, 'keyfile'))
ca_cert_file = expand_path(read_conf(conf, 'cacertfile'))
password = read_conf(conf, 'password')
connect_timeout = read_conf(conf, 'connect_timeout')
max_time = read_conf(conf, 'max_time')

check_var('migserver', mig_server)
check_var('certfile', cert_file)
check_var('keyfile', key_file)
